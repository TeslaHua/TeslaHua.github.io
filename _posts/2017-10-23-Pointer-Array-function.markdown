---
layout: post
category: "slam"
title:  "C++中的指针与数组和函数的相互关系"
tags: [C++,指针,Array,Function]
---

### 1.指针与数组

#### (1) 指针数组
 
 定义： int * p[n]; 

 其中[]优先级高，先与p结合成为一个数组，再由int* 说明这是一个整型指针数组，它有n个指针类型的数组元素。这里执行p+1时，则p指向下一个数组元素，这样赋值是错误的：p=a；因为p是个不可知的表示，只存在p[0]、p[1]、p[2]...p[n-1],而且它们分别是指针变量可以用来存放变量地址。但可以这样 * p=a; 这里*p表示指针数组第一个元素的值，a的首地址的值。

<!-- more -->

 如要将二维数组赋给一指针数组:

    int *p[3];
    int a[3][4];
    p++; //该语句表示p数组指向下一个数组元素。注：此数组每一个元素都是一个指针
    for(i=0;i<3;i++)
    p[i]=a[i]

 这里int *p[3]表示一个一维数组内存放着三个指针变量，分别是p[0]、p[1]、p[2]，所以要分别赋值。

#### (2) 数组指针(也称行指针)

 定义： int (*p)[n];

 其中()优先级高，首先说明p是一个指针，指向一个整型的一维数组，这个一维数组的长度是n，也可以说是p的步长。也就是说执行p+1时，p要跨过n个整型数据的长度。

 如要将二维数组赋给一指针，应这样赋值：

	int a[3][4];
	int (*p)[4]; //该语句是定义一个数组指针，指向含4个元素的一维数组。
	p=a;        //将该二维数组的首地址赋给p，也就是a[0]或&a[0][0]
	p++;       //该语句执行过后，也就是p=p+1;p跨过行a[0][]指向了行a[1][]

 所以数组指针也称指向一维数组的指针，亦称行指针。

#### (3) 指针数组和数组指针的内存布局

1. 指针数组：首先它是一个数组，数组的元素都是指针，数组占多少个字节由数组本身的大小决定，每一个元素都是一个指针，在32 位系统下任何类型的指针永远是占4 个字节。它是“储存指针的数组”的简称。

2. 数组指针：首先它是一个指针，它指向一个数组。在32 位系统下任何类型的指针永远是占4 个字节，至于它指向的数组占多少字节，不知道，具体要看数组大小。它是“指向数组的指针”的简称。

![zhiarray](http://oyqo0q1a2.bkt.clouddn.com/zhizhen.png)

### 2.指针与函数

#### (1)指针函数

  定义： int *p(......); p为返回一个指针的函数，该指针指向整型数据

  **指针函数是指带指针的函数，即本质是一个函数，函数返回类型是某一类型的指针** 

  首先它是一个函数，只不过这个函数的返回值是一个地址值。函数返回值必须用同类型的指针变量来接受，也就是说，指针函数一定有函数返回值，而且，在主调函数中，函数返回值必须赋给同类型的指针变量。例如：

    float *fun();
    float *p;
    p = fun(a);

#### (2)函数指针(常用于回调函数)

  定义： int (*p)(......); p为指向函数的指针，该函数返回一个整型值

  **函数指针是指向函数的指针变量，即本质是一个指针变量**

  **函数的声明必须与函数指针的声明保持一致**

   指向函数的指针包含了函数的地址的入口地址，可以通过它来调用函数。声明格式如下：

   ***类型说明符 (*函数名)(参数)***

   其实这里不能称为函数名，应该叫做指针的变量名，这个特殊的指针指向一个返回整型值的函数。例如：

    int func(int x);     //声明一个函数 
    int (*f) (int x);    //声明一个函数指针
    f=func;              //将func函数的首地址赋给指针f
 
    f = &func;      //或者使用下面的方法将函数地址赋给函数指针：

### 3.指针与数组和函数的结合

#### (1)返回数组指针的函数

  因为数组不能被拷贝，所以函数不能返回数组。但是可以通过返回数组的指针或引用。下面有两种方法来实现：

  第一种：类型别名

    typedef int arrT[10];  //arrT是一个类型别名，表示含有10个整数的数组 
    using arrT = int[10];  //arrT的等价声明

    arrT* func(int i);  //func返回一个指向有10个整数的数组的指针
  
  第二种：不使用类型别名

    格式： Type(*function(parameter_list))[dimension]

  类似于其他数组的声明，Type表示元素的类型，dimension表示数组的大小。

    int (*func(int i))[10]; 

  可以按照以下的顺序来逐层理解该声明的含义：

   1. func(int i)表示调用func函数时需要一个int类型的实参；
   2. (*func(int i))意味着我们可以对函数调用的结果执行解引用的操作
   3. (*func(int i))[10]表示解引用func的调用将得到一个大小是10的数组
   4. int (*func(int i))[10]表示数组中的元素是int类型

#### (2)函数指针数组

  定义一个函数指针数组，比如说将所有的整数排序算法函数都放到一个数组中,这些函数的声明类型都是 void 函数名（int*, int）。

  方法一：用类似数组的方法定义

  ![zhizhenarray](http://oyqo0q1a2.bkt.clouddn.com/zhizhenarray.png)

  ![example](http://oyqo0q1a2.bkt.clouddn.com/example.png)

  方法二：使用类型别名

  首先，使用 typedef 声明一个名为 arrf 的函数指针数组类型，再用此类型定义一个函数指针数组变量，并将它初始化。

  ![typedef](http://oyqo0q1a2.bkt.clouddn.com/typedef.png)

  

  
 
  





    




  

   



   
 


 














